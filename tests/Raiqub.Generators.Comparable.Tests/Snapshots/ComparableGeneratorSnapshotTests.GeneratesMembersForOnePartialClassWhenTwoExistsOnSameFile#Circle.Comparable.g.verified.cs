//HintName: Circle.Comparable.g.cs
// <auto-generated />
#nullable enable

using System;

#pragma warning disable CS1591 // publicly visible type or member must be documented

namespace TestNamespace
{
    partial class Circle
        : IComparable, IComparable<Circle?>, IEquatable<Circle?>
    {
        public static bool operator <(Circle? left, Circle? right) => Compare(left, right) < 0;
        public static bool operator >(Circle? left, Circle? right) => Compare(left, right) > 0;
        public static bool operator <=(Circle? left, Circle? right) => Compare(left, right) <= 0;
        public static bool operator >=(Circle? left, Circle? right) => Compare(left, right) >= 0;
        public static bool operator ==(Circle? left, Circle? right) => Compare(left, right) == 0;
        public static bool operator !=(Circle? left, Circle? right) => Compare(left, right) != 0;

        public int CompareTo(object? obj)
        {
            if (ReferenceEquals(null, obj)) return 1;
            if (ReferenceEquals(this, obj)) return 0;
            return obj is Circle other ? CompareTo(other) : throw new ArgumentException($"Object must be of type {nameof(Circle)}");
        }

        public virtual bool Equals(Circle? other) => CompareTo(other) == 0;

        public override bool Equals(object? obj)
        {
            return obj is Circle other ? Equals(other) : throw new ArgumentException($"Object must be of type {nameof(Circle)}");
        }

        private static int Compare(Circle? left, Circle? right)
        {
            if (ReferenceEquals(left, right)) return 0;
            if (left is null) return -1;
            return left.CompareTo(right);
        }
    }
}