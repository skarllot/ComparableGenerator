// <auto-generated />
#nullable enable

using System;

#pragma warning disable CS1591 // publicly visible type or member must be documented

{{#Namespace}}
namespace {{.}}
{
{{/Namespace}}
    partial {{TypeKeyword}} {{Name}}
        : IComparable, IComparable<{{Name}}?>, IEquatable<{{Name}}?>
{{#IsValueType}}
        , IComparable<{{Name}}>, IEquatable<{{Name}}>
{{/IsValueType}}
    {
        public static bool operator <({{Name}}? left, {{Name}}? right) => Compare(left, right) < 0;
        public static bool operator >({{Name}}? left, {{Name}}? right) => Compare(left, right) > 0;
        public static bool operator <=({{Name}}? left, {{Name}}? right) => Compare(left, right) <= 0;
        public static bool operator >=({{Name}}? left, {{Name}}? right) => Compare(left, right) >= 0;
{{^HasEqualityOperators}}
        public static bool operator ==({{Name}}? left, {{Name}}? right) => Compare(left, right) == 0;
        public static bool operator !=({{Name}}? left, {{Name}}? right) => Compare(left, right) != 0;
{{/HasEqualityOperators}}
{{#IsValueType}}
        public static bool operator <({{Name}} left, {{Name}} right) => Compare(left, right) < 0;
        public static bool operator >({{Name}} left, {{Name}} right) => Compare(left, right) > 0;
        public static bool operator <=({{Name}} left, {{Name}} right) => Compare(left, right) <= 0;
        public static bool operator >=({{Name}} left, {{Name}} right) => Compare(left, right) >= 0;
        public static bool operator ==({{Name}} left, {{Name}} right) => Compare(left, right) == 0;
        public static bool operator !=({{Name}} left, {{Name}} right) => Compare(left, right) != 0;
{{/IsValueType}}

        public{{^IsSealed}} virtual{{/IsSealed}} int CompareTo(object? obj)
        {
            if (ReferenceEquals(null, obj)) return 1;
            if (ReferenceEquals(this, obj)) return 0;
            return obj is {{Name}} other ? CompareTo(other) : throw new ArgumentException($"Object must be of type {nameof({{Name}})}");
        }
{{#IsValueType}}

        public{{^IsSealed}} virtual{{/IsSealed}} int CompareTo({{Name}}? other)
        {
            if (!other.HasValue) return 1;
            return CompareTo(other.Value);
        }
{{/IsValueType}}

        public{{^IsSealed}} virtual{{/IsSealed}} bool Equals({{Name}}? other) => CompareTo(other) == 0;
{{#IsValueType}}
        public{{^IsSealed}} virtual{{/IsSealed}} bool Equals({{Name}} other) => CompareTo(other) == 0;
{{/IsValueType}}
{{^HasObjectEquals}}

        public override bool Equals(object? obj)
        {
            return obj is {{Name}} other ? Equals(other) : throw new ArgumentException($"Object must be of type {nameof({{Name}})}");
        }
{{/HasObjectEquals}}

        private static int Compare({{Name}}? left, {{Name}}? right)
        {
{{#IsReferenceType}}
            if (ReferenceEquals(left, right)) return 0;
            if (left is null) return -1;
            return left.CompareTo(right);
{{/IsReferenceType}}
{{#IsValueType}}
            if (!left.HasValue && !right.HasValue) return 0;
            if (left is null) return -1;
            return left.Value.CompareTo(right);
{{/IsValueType}}
        }
{{#IsValueType}}

        private static int Compare({{Name}} left, {{Name}} right)
        {
            return left.CompareTo(right);
        }
{{/IsValueType}}
    }
{{#Namespace}}
}
{{/Namespace}}